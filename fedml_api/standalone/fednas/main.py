import argparse
import logging

import numpy as np
import torch
import wandb

from data_loader import partition_data, get_dataloader
from fednas_search import FedNASTrainer

args_datadir = "./data/cifar10"
args_logdir = "log/cifar10"
args_alpha = 0.5
args_net_config = [3072, 100, 10]

switch_wandb = True


def add_args(parser):
    """
    parser : argparse.ArgumentParser
    return a parser added with args required by fit
    """
    # Training settings
    parser.add_argument('--gpu', type=int, default=0, help='gpu')
    parser.add_argument('--stage', type=str, default='search',
                        help='stage: search; train')
    parser.add_argument('--model', type=str, default='resnet', metavar='N',
                        help='neural network used in training')

    parser.add_argument('--dataset', type=str, default='cifar10', metavar='N',
                        help='dataset used for training')

    parser.add_argument('--partition', type=str, default='hetero', metavar='N',
                        help='how to partition the dataset on local workers')

    parser.add_argument('--batch_size', type=int, default=64, metavar='N',
                        help='input batch size for training (default: 64)')

    parser.add_argument('--wd', help='weight decay parameter;', type=float, default=0.001)

    parser.add_argument('--epochs', type=int, default=5, metavar='EP',
                        help='how many epochs will be trained locally')

    parser.add_argument('--local_points', type=int, default=5000, metavar='LP',
                        help='the approximate fixed number of data points we will have on each local worker')

    parser.add_argument('--client_number', type=int, default=16, metavar='NN',
                        help='number of workers in a distributed cluster')

    parser.add_argument('--comm_round', type=int, default=10,
                        help='how many round of communications we shoud use')

    parser.add_argument('--init_channels', type=int, default=16, help='num of init channels')
    parser.add_argument('--layers', type=int, default=8, help='DARTS layers')
    parser.add_argument('--learning_rate', type=float, default=0.025, help='init learning rate')
    parser.add_argument('--learning_rate_min', type=float, default=0.001, help='min learning rate')
    parser.add_argument('--momentum', type=float, default=0.9, help='momentum')
    parser.add_argument('--weight_decay', type=float, default=3e-4, help='weight decay')
    parser.add_argument('--arch_learning_rate', type=float, default=3e-4, help='learning rate for arch encoding')
    parser.add_argument('--arch_weight_decay', type=float, default=1e-3, help='weight decay for arch encoding')
    parser.add_argument('--grad_clip', type=float, default=5, help='gradient clipping')
    parser.add_argument('--lambda_train_regularizer', type=float, default=1, help='train regularizer parameter')
    parser.add_argument('--lambda_valid_regularizer', type=float, default=1, help='validation regularizer parameter')
    parser.add_argument('--report_freq', type=float, default=10, help='report frequency')
    parser.add_argument('--early_stopping', type=int, default=0, help='early_stopping algorithm')

    parser.add_argument('--auxiliary', action='store_true', default=False, help='use auxiliary tower')
    parser.add_argument('--arch', type=str, default='FedNAS_V1', help='which architecture to use')

    parser.add_argument('--frequency_of_the_test', type=int, default=1,
                        help='the frequency of the test')
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    logging.basicConfig()
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    args = add_args(argparse.ArgumentParser(description='Federated NAS'))

    device = torch.device("cuda:" + str(args.gpu) if torch.cuda.is_available() else "cpu")
    logger.info(device)

    wandb.init(
        project="federated_nas",
        name="FedNAS-r" + str(args.comm_round) + "-e" + str(args.epochs),
        config=0
    )

    # fix the seed to fix the data distribution which is generated by using np.random
    seed = 0
    np.random.seed(seed)
    # torch.manual_seed(seed)

    # data
    logger.info("Partitioning data")
    X_train, y_train, X_test, y_test, net_dataidx_map, traindata_cls_counts = partition_data(args.dataset, args_datadir,
                                                                                             args_logdir,
                                                                                             args.partition,
                                                                                             args.client_number,
                                                                                             args_alpha,
                                                                                             args=args)
    train_dl_global, test_dl_global = get_dataloader(args.dataset, args_datadir, args.batch_size, args.batch_size)

    n_classes = len(np.unique(y_train))
    logging.info("n_classes = " + str(n_classes))
    logging.info("net_dataidx_map = " + str(net_dataidx_map))
    logging.info("traindata_cls_counts = " + str(traindata_cls_counts))
    logging.info("train_dl_global number = " + str(len(train_dl_global)))
    logging.info("test_dl_global number = " + str(len(test_dl_global)))

    trainer = FedNASTrainer(net_dataidx_map, train_dl_global, test_dl_global, device, args, n_classes, logger,
                            switch_wandb)
    trainer.search()
    trainer.save_model()

