apply plugin: 'com.android.library'

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 27
        targetSdkVersion 27
        versionCode 4
        versionName "1.0.0"
        buildConfigField "int", "SDKVersion", "2"
        consumerProguardFiles 'proguard-rules.pro'
    }

    sourceSets.main {
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
        jniLibs.srcDir 'src/main/libs'
        // This is not necessary unless you have precompiled libraries in your project.
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
    publishNonDefault true

    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
        exclude 'META-INF/DEPENDENCIES' // will not include LICENSE file
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/okio-1.13.0.jar')
    compile files('libs/okhttp-3.9.1.jar')
    compile files('libs/protobuf-java-2.5.0.jar')
    compile files('libs/retrofit-2.3.0.jar')
    compile files('libs/volley-1.0.0-sources.jar')
    compile files('libs/mirror-1.6.1.jar')
    //mqtt
    compile files('libs/mqtt-client-1.14.jar')
    compile files('libs/hawtbuf-1.11.jar')
    compile files('libs/hawtdispatch-1.22.jar')
    compile files('libs/hawtdispatch-transport-1.22.jar')
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

def SDK_BASENAME = "FedML_IoT_SDK"
def sdkDestinationPath = "build"
def zipFile = file('build/intermediates/bundles/release/classes.jar')

task deleteBuild(type: Delete) {
    delete sdkDestinationPath + SDK_BASENAME + ".jar"
}
task makeJar(type: Jar, dependsOn: ['assembleRelease']) {
    from zipTree(zipFile)

    from fileTree(dir: 'src/main', includes: ['assets/**', 'aidl/**'])
    baseName = SDK_BASENAME
    destinationDir = file(sdkDestinationPath)
}
makeJar.dependsOn(deleteBuild, build)